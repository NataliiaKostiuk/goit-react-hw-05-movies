{"version":3,"file":"static/js/728.db97cdac.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/BtnLoadMore/BtnLoadMore.styled.js","components/BtnLoadMore/BtnLoadMore.jsx","components/searchMovies/searchMovies.styled.js","components/searchMovies/searchMovies.jsx","pages/movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\nlist-style:none;\ndisplay: flex;\ngap:10px;\nflex-wrap:wrap;\njustify-content: center;\n`;\nexport const Img = styled.img`\nwidth: 300px;\nheight: 500px;`","import { Link } from \"react-router-dom\";\nimport { List,Img } from \"./MoviesList.styled\";\nimport { imageValidation } from '../validImage';\nimport { nanoid } from \"nanoid\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const MoviesList = ({ objects }) => {\n    const location = useLocation();\n    return (\n         <List>\n            {objects.map(({ id, title, poster_path }) => {\n            \n           return (\n              <li key={nanoid()}>\n                   <Link to={`/movies/${id}`} state={{ from: location }}>\n                       <Img src={imageValidation(poster_path, 300)} alt={title} />\n                 </Link>\n              </li>)\n            })} \n    </List>\n    )\n}","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  padding: 8px 16px;\n  border-radius: 2px;\n  background-color: #3f51b5;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: block;\n  margin-left: auto;\n  margin-right:auto; \n  color: #fff;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n    &:hover{\n     background-color: #303f9f; \n \n    }\n`"," \nimport { Button } from './BtnLoadMore.styled';\nexport const LoadMoreBtn = ({onClick}) => {\n    return (\n        <Button type=\"button\" onClick={onClick}>Load more</Button>\n    )\n}","import styled from \"styled-components\";\nimport { Field } from \"formik\";\n\nexport const StyledField = styled(Field)`\nmargin-top: 10px;\nwidth: 600px;\nheight: 50px;\nborder-radius: 10px;\n &.active {\n    color: rgba(80, 155, 10, 0.789);\n  }\n`;\n\nexport const Btn = styled.button`\nborder: none;\nbackground-color: rgba(31, 124, 245, 0.959);\ncolor: rgb(2, 35, 72);\ndisplay: inline-block;\npadding: 17px;\nborder-radius: 15px;\n`;\n\n\n","\nimport {Formik, Form} from 'formik';\nimport * as Yup from 'yup';\nimport { StyledField, Btn } from './searchMovies.styled';\n\nconst formSchema = Yup.object().shape({\n  query: Yup.string().required('This field is required!').trim().lowercase(),\n})\n\nexport const SearchMovies = ({ handleSubmit }) => {\n    return (\n<Formik\n       initialValues={{\n         query: '',\n          }}\n        validationSchema={formSchema} \n        \n        onSubmit={(values, actions) => {\n      handleSubmit(values.query)\n     actions.resetForm();\n        }}>  \n        \n<Form >\n          <StyledField type=\"text\" name=\"query\"  placeholder=\"Search movie\"\n             />  \n       <Btn type=\"submit\" >\n              <span >Search</span>\n            </Btn>\n </Form>    \n </Formik> \n    )\n}\n","\n\nimport { LoadMoreBtn } from 'components/BtnLoadMore/BtnLoadMore';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport toast from 'react-hot-toast';\nimport { Loader } from 'Loader/loader';\nimport { SearchMovies } from '../components/searchMovies/searchMovies';\nimport { Suspense, useState,useEffect } from 'react';\nimport {  useSearchParams, Outlet } from 'react-router-dom';\nimport { fetchMoviesByKeyword } from '../components/ApiService';\n\nexport default function Movies () {\n  const [data, setData] = useState([]);\n  const [query, setQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const [loading, setLoading] = useState(false);\n  // eslint-disable-next-line\n  const [error, setError] = useState(false);\n  const [params, setParams] = useSearchParams();\n  \n   const search = params.get('query') ?? '';\n\n  const handleSubmit = value => {\n    params.set('query', value);\n    setParams(params);\n     setQuery(value);\n    if (query === value) {\n      return;\n    } else {\n      setData([]);\n      setPage(1)\n    }\n  }\n  \n  const handleClick = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  useEffect(() => {\n    setQuery(search);\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search]);\n\n    useEffect(() => {\n    async function getMovieByKeyword() {\n      setError(false);\n      setLoading(true);\n      try {\n        const data = await fetchMoviesByKeyword(query ,page);\n        toast.success('Successfully created!');\n        setData(prevState => [...prevState, ...data]);\n        setTotalPage(Math.ceil(data.totalHits / 12));\n      } catch (error) {\n        toast.error(`This is an error!`);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieByKeyword()\n  }, [query ,page]);\n \n  return (\n    <> \n      <SearchMovies handleSubmit={handleSubmit}\n      />\n        {loading && <Loader />}\n      <MoviesList objects={data} />\n       {data.length > 0 && page !== totalPage &&\n     (<LoadMoreBtn onClick={handleClick} />)}\n    <Suspense>\n     <Outlet />\n    </Suspense>\n\n    </>\n  );\n};\n\n\n"],"names":["List","styled","Img","MoviesList","objects","location","useLocation","map","id","title","poster_path","to","state","from","src","imageValidation","alt","nanoid","Button","LoadMoreBtn","onClick","type","StyledField","Field","Btn","formSchema","Yup","shape","query","required","trim","lowercase","SearchMovies","handleSubmit","initialValues","validationSchema","onSubmit","values","actions","resetForm","name","placeholder","Movies","useState","data","setData","setQuery","page","setPage","totalPage","setTotalPage","loading","setLoading","setError","useSearchParams","params","setParams","search","get","useEffect","fetchMoviesByKeyword","toast","prevState","Math","ceil","totalHits","getMovieByKeyword","value","set","length","prevPage","Suspense"],"sourceRoot":""}